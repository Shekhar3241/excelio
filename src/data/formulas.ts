export interface Formula {
  id: string;
  name: string;
  category: string;
  description: string;
  syntax: string;
  example: string;
  notes?: string;
}

export interface Category {
  id: string;
  name: string;
  description: string;
  icon: string;
}

export const categories: Category[] = [
  {
    id: 'lookup-reference',
    name: 'Lookup & Reference',
    description: 'Find and retrieve data from ranges and tables',
    icon: 'üîç',
  },
  {
    id: 'text',
    name: 'Text Functions',
    description: 'Manipulate and format text strings',
    icon: 'üìù',
  },
  {
    id: 'date-time',
    name: 'Date & Time',
    description: 'Work with dates, times, and periods',
    icon: 'üìÖ',
  },
  {
    id: 'logical',
    name: 'Logical Functions',
    description: 'Perform conditional operations and tests',
    icon: 'üí°',
  },
  {
    id: 'math-trig',
    name: 'Math & Trig',
    description: 'Mathematical and trigonometric calculations',
    icon: 'üî¢',
  },
  {
    id: 'statistical',
    name: 'Statistical',
    description: 'Analyze and summarize data sets',
    icon: 'üìä',
  },
  {
    id: 'financial',
    name: 'Financial',
    description: 'Calculate loans, investments, and depreciation',
    icon: 'üí∞',
  },
  {
    id: 'database',
    name: 'Database',
    description: 'Perform database operations on lists',
    icon: 'üóÑÔ∏è',
  },
  {
    id: 'information',
    name: 'Information',
    description: 'Test data types and cell properties',
    icon: '‚ÑπÔ∏è',
  },
  {
    id: 'engineering',
    name: 'Engineering',
    description: 'Engineering and conversion functions',
    icon: '‚öôÔ∏è',
  },
];

export const formulas: Formula[] = [
  // Lookup & Reference
  {
    id: 'vlookup',
    name: 'VLOOKUP',
    category: 'lookup-reference',
    description: 'Searches for a value in the first column of a range and returns a value in the same row from another column',
    syntax: '=VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])',
    example: '=VLOOKUP("Apple", A2:C10, 3, FALSE)',
    notes: 'Use FALSE for exact match, TRUE for approximate match. The lookup column must be the leftmost column.',
  },
  {
    id: 'hlookup',
    name: 'HLOOKUP',
    category: 'lookup-reference',
    description: 'Searches for a value in the top row of a range and returns a value in the same column from another row',
    syntax: '=HLOOKUP(lookup_value, table_array, row_index_num, [range_lookup])',
    example: '=HLOOKUP("Product", A1:E5, 3, FALSE)',
    notes: 'Horizontal version of VLOOKUP. Useful when data is organized in rows rather than columns.',
  },
  {
    id: 'index',
    name: 'INDEX',
    category: 'lookup-reference',
    description: 'Returns a value from a table based on the row and column numbers you specify',
    syntax: '=INDEX(array, row_num, [column_num])',
    example: '=INDEX(A1:C10, 5, 2)',
    notes: 'Often combined with MATCH for flexible lookups.',
  },
  {
    id: 'match',
    name: 'MATCH',
    category: 'lookup-reference',
    description: 'Returns the relative position of an item in a range that matches a specified value',
    syntax: '=MATCH(lookup_value, lookup_array, [match_type])',
    example: '=MATCH("Apple", A1:A10, 0)',
    notes: 'Use 0 for exact match, 1 for less than, -1 for greater than.',
  },
  {
    id: 'xlookup',
    name: 'XLOOKUP',
    category: 'lookup-reference',
    description: 'Modern replacement for VLOOKUP that searches a range or array and returns the corresponding item',
    syntax: '=XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])',
    example: '=XLOOKUP("Apple", A2:A10, C2:C10)',
    notes: 'More flexible than VLOOKUP, can search in any direction and supports advanced features.',
  },
  {
    id: 'choose',
    name: 'CHOOSE',
    category: 'lookup-reference',
    description: 'Returns a value from a list based on a given position number',
    syntax: '=CHOOSE(index_num, value1, [value2], ...)',
    example: '=CHOOSE(2, "Red", "Green", "Blue")',
    notes: 'Returns "Green". Index starts at 1.',
  },
  {
    id: 'offset',
    name: 'OFFSET',
    category: 'lookup-reference',
    description: 'Returns a reference offset from a starting cell or range',
    syntax: '=OFFSET(reference, rows, cols, [height], [width])',
    example: '=OFFSET(A1, 3, 2, 1, 1)',
    notes: 'Returns a reference 3 rows down and 2 columns right from A1.',
  },
  {
    id: 'indirect',
    name: 'INDIRECT',
    category: 'lookup-reference',
    description: 'Returns a reference specified by a text string',
    syntax: '=INDIRECT(ref_text, [a1])',
    example: '=INDIRECT("B5")',
    notes: 'Useful for creating dynamic references.',
  },
  {
    id: 'row',
    name: 'ROW',
    category: 'lookup-reference',
    description: 'Returns the row number of a reference',
    syntax: '=ROW([reference])',
    example: '=ROW(C10)',
    notes: 'Returns 10. Without argument, returns current row number.',
  },
  {
    id: 'column',
    name: 'COLUMN',
    category: 'lookup-reference',
    description: 'Returns the column number of a reference',
    syntax: '=COLUMN([reference])',
    example: '=COLUMN(D5)',
    notes: 'Returns 4. Without argument, returns current column number.',
  },
  {
    id: 'rows',
    name: 'ROWS',
    category: 'lookup-reference',
    description: 'Returns the number of rows in a reference',
    syntax: '=ROWS(array)',
    example: '=ROWS(A1:A10)',
    notes: 'Returns 10.',
  },
  {
    id: 'columns',
    name: 'COLUMNS',
    category: 'lookup-reference',
    description: 'Returns the number of columns in a reference',
    syntax: '=COLUMNS(array)',
    example: '=COLUMNS(A1:E1)',
    notes: 'Returns 5.',
  },
  {
    id: 'transpose',
    name: 'TRANSPOSE',
    category: 'lookup-reference',
    description: 'Converts rows to columns and columns to rows',
    syntax: '=TRANSPOSE(array)',
    example: '=TRANSPOSE(A1:C1)',
    notes: 'Converts a horizontal range to vertical or vice versa.',
  },

  // Text Functions
  {
    id: 'concatenate',
    name: 'CONCATENATE',
    category: 'text',
    description: 'Joins several text strings into one text string',
    syntax: '=CONCATENATE(text1, [text2], ...)',
    example: '=CONCATENATE("Hello", " ", "World")',
    notes: 'Can also use the & operator. CONCAT and TEXTJOIN are modern alternatives.',
  },
  {
    id: 'left',
    name: 'LEFT',
    category: 'text',
    description: 'Returns the leftmost characters from a text string',
    syntax: '=LEFT(text, [num_chars])',
    example: '=LEFT("Excel Formula", 5)',
    notes: 'Returns "Excel". Default num_chars is 1.',
  },
  {
    id: 'right',
    name: 'RIGHT',
    category: 'text',
    description: 'Returns the rightmost characters from a text string',
    syntax: '=RIGHT(text, [num_chars])',
    example: '=RIGHT("Excel Formula", 7)',
    notes: 'Returns "Formula". Default num_chars is 1.',
  },
  {
    id: 'mid',
    name: 'MID',
    category: 'text',
    description: 'Returns a specific number of characters from a text string, starting at the position you specify',
    syntax: '=MID(text, start_num, num_chars)',
    example: '=MID("Excel Formula", 7, 7)',
    notes: 'Returns "Formula". Position counting starts at 1.',
  },
  {
    id: 'len',
    name: 'LEN',
    category: 'text',
    description: 'Returns the number of characters in a text string',
    syntax: '=LEN(text)',
    example: '=LEN("Hello")',
    notes: 'Returns 5. Counts all characters including spaces.',
  },
  {
    id: 'upper',
    name: 'UPPER',
    category: 'text',
    description: 'Converts text to uppercase',
    syntax: '=UPPER(text)',
    example: '=UPPER("excel")',
    notes: 'Returns "EXCEL".',
  },
  {
    id: 'lower',
    name: 'LOWER',
    category: 'text',
    description: 'Converts text to lowercase',
    syntax: '=LOWER(text)',
    example: '=LOWER("EXCEL")',
    notes: 'Returns "excel".',
  },
  {
    id: 'trim',
    name: 'TRIM',
    category: 'text',
    description: 'Removes extra spaces from text',
    syntax: '=TRIM(text)',
    example: '=TRIM("  Excel  Formula  ")',
    notes: 'Removes leading, trailing, and extra spaces between words.',
  },
  {
    id: 'substitute',
    name: 'SUBSTITUTE',
    category: 'text',
    description: 'Replaces text in a text string',
    syntax: '=SUBSTITUTE(text, old_text, new_text, [instance_num])',
    example: '=SUBSTITUTE("Excel 2019", "2019", "365")',
    notes: 'Returns "Excel 365". Can replace all or specific occurrence.',
  },
  {
    id: 'replace',
    name: 'REPLACE',
    category: 'text',
    description: 'Replaces part of a text string based on position',
    syntax: '=REPLACE(old_text, start_num, num_chars, new_text)',
    example: '=REPLACE("Excel 2019", 7, 4, "365")',
    notes: 'Returns "Excel 365". Position-based replacement.',
  },
  {
    id: 'find',
    name: 'FIND',
    category: 'text',
    description: 'Finds one text string within another (case-sensitive)',
    syntax: '=FIND(find_text, within_text, [start_num])',
    example: '=FIND("cel", "Excel")',
    notes: 'Returns 2. Case-sensitive. Returns error if not found.',
  },
  {
    id: 'search',
    name: 'SEARCH',
    category: 'text',
    description: 'Finds one text string within another (case-insensitive)',
    syntax: '=SEARCH(find_text, within_text, [start_num])',
    example: '=SEARCH("CEL", "Excel")',
    notes: 'Returns 2. Case-insensitive. Supports wildcards.',
  },
  {
    id: 'proper',
    name: 'PROPER',
    category: 'text',
    description: 'Capitalizes the first letter of each word',
    syntax: '=PROPER(text)',
    example: '=PROPER("excel formula")',
    notes: 'Returns "Excel Formula".',
  },
  {
    id: 'exact',
    name: 'EXACT',
    category: 'text',
    description: 'Checks if two text strings are exactly the same',
    syntax: '=EXACT(text1, text2)',
    example: '=EXACT("Excel", "excel")',
    notes: 'Returns FALSE. Case-sensitive comparison.',
  },
  {
    id: 'text',
    name: 'TEXT',
    category: 'text',
    description: 'Formats a number and converts it to text',
    syntax: '=TEXT(value, format_text)',
    example: '=TEXT(1234.56, "$#,##0.00")',
    notes: 'Returns "$1,234.56". Useful for custom number formatting.',
  },
  {
    id: 'value',
    name: 'VALUE',
    category: 'text',
    description: 'Converts a text string to a number',
    syntax: '=VALUE(text)',
    example: '=VALUE("123.45")',
    notes: 'Returns 123.45 as a number.',
  },
  {
    id: 'textjoin',
    name: 'TEXTJOIN',
    category: 'text',
    description: 'Combines text from multiple ranges with a delimiter',
    syntax: '=TEXTJOIN(delimiter, ignore_empty, text1, [text2], ...)',
    example: '=TEXTJOIN(", ", TRUE, A1:A5)',
    notes: 'Modern alternative to CONCATENATE with delimiter support.',
  },
  {
    id: 'concat',
    name: 'CONCAT',
    category: 'text',
    description: 'Combines text from multiple ranges or strings',
    syntax: '=CONCAT(text1, [text2], ...)',
    example: '=CONCAT(A1:A3)',
    notes: 'Modern replacement for CONCATENATE.',
  },
  {
    id: 'rept',
    name: 'REPT',
    category: 'text',
    description: 'Repeats text a given number of times',
    syntax: '=REPT(text, number_times)',
    example: '=REPT("*", 5)',
    notes: 'Returns "*****".',
  },

  // Date & Time
  {
    id: 'today',
    name: 'TODAY',
    category: 'date-time',
    description: 'Returns the current date',
    syntax: '=TODAY()',
    example: '=TODAY()',
    notes: 'Updates automatically when the worksheet is recalculated. Does not include time.',
  },
  {
    id: 'now',
    name: 'NOW',
    category: 'date-time',
    description: 'Returns the current date and time',
    syntax: '=NOW()',
    example: '=NOW()',
    notes: 'Updates automatically. Includes both date and time.',
  },
  {
    id: 'date',
    name: 'DATE',
    category: 'date-time',
    description: 'Returns a date value from year, month, and day',
    syntax: '=DATE(year, month, day)',
    example: '=DATE(2024, 12, 25)',
    notes: 'Useful for creating dates from separate values.',
  },
  {
    id: 'year',
    name: 'YEAR',
    category: 'date-time',
    description: 'Returns the year from a date value',
    syntax: '=YEAR(serial_number)',
    example: '=YEAR(TODAY())',
    notes: 'Returns a 4-digit year (e.g., 2024).',
  },
  {
    id: 'month',
    name: 'MONTH',
    category: 'date-time',
    description: 'Returns the month from a date value',
    syntax: '=MONTH(serial_number)',
    example: '=MONTH(TODAY())',
    notes: 'Returns a number from 1 (January) to 12 (December).',
  },
  {
    id: 'day',
    name: 'DAY',
    category: 'date-time',
    description: 'Returns the day of the month from a date value',
    syntax: '=DAY(serial_number)',
    example: '=DAY(TODAY())',
    notes: 'Returns a number from 1 to 31.',
  },
  {
    id: 'datedif',
    name: 'DATEDIF',
    category: 'date-time',
    description: 'Calculates the difference between two dates',
    syntax: '=DATEDIF(start_date, end_date, unit)',
    example: '=DATEDIF("1/1/2020", "1/1/2024", "Y")',
    notes: 'Units: "Y" (years), "M" (months), "D" (days), "MD" (days ignoring months), etc.',
  },
  {
    id: 'weekday',
    name: 'WEEKDAY',
    category: 'date-time',
    description: 'Returns the day of the week as a number',
    syntax: '=WEEKDAY(serial_number, [return_type])',
    example: '=WEEKDAY(TODAY())',
    notes: 'Returns 1-7 where 1 is Sunday by default.',
  },
  {
    id: 'weeknum',
    name: 'WEEKNUM',
    category: 'date-time',
    description: 'Returns the week number of the year',
    syntax: '=WEEKNUM(serial_number, [return_type])',
    example: '=WEEKNUM(TODAY())',
    notes: 'Returns 1-53.',
  },
  {
    id: 'eomonth',
    name: 'EOMONTH',
    category: 'date-time',
    description: 'Returns the last day of the month before or after a specified number of months',
    syntax: '=EOMONTH(start_date, months)',
    example: '=EOMONTH(TODAY(), 0)',
    notes: 'Returns the last day of the current month.',
  },
  {
    id: 'networkdays',
    name: 'NETWORKDAYS',
    category: 'date-time',
    description: 'Returns the number of working days between two dates',
    syntax: '=NETWORKDAYS(start_date, end_date, [holidays])',
    example: '=NETWORKDAYS("1/1/2024", "12/31/2024")',
    notes: 'Excludes weekends and optional holidays.',
  },
  {
    id: 'workday',
    name: 'WORKDAY',
    category: 'date-time',
    description: 'Returns a date that is a specified number of working days before or after a date',
    syntax: '=WORKDAY(start_date, days, [holidays])',
    example: '=WORKDAY(TODAY(), 10)',
    notes: 'Returns date 10 working days from today.',
  },
  {
    id: 'time',
    name: 'TIME',
    category: 'date-time',
    description: 'Returns a time value from hour, minute, and second',
    syntax: '=TIME(hour, minute, second)',
    example: '=TIME(14, 30, 0)',
    notes: 'Creates a time value for 2:30 PM.',
  },
  {
    id: 'hour',
    name: 'HOUR',
    category: 'date-time',
    description: 'Returns the hour from a time value',
    syntax: '=HOUR(serial_number)',
    example: '=HOUR(NOW())',
    notes: 'Returns 0-23.',
  },
  {
    id: 'minute',
    name: 'MINUTE',
    category: 'date-time',
    description: 'Returns the minute from a time value',
    syntax: '=MINUTE(serial_number)',
    example: '=MINUTE(NOW())',
    notes: 'Returns 0-59.',
  },
  {
    id: 'second',
    name: 'SECOND',
    category: 'date-time',
    description: 'Returns the second from a time value',
    syntax: '=SECOND(serial_number)',
    example: '=SECOND(NOW())',
    notes: 'Returns 0-59.',
  },
  {
    id: 'edate',
    name: 'EDATE',
    category: 'date-time',
    description: 'Returns a date that is a specified number of months before or after a date',
    syntax: '=EDATE(start_date, months)',
    example: '=EDATE(TODAY(), 6)',
    notes: 'Returns date 6 months from today.',
  },

  // Logical Functions
  {
    id: 'if',
    name: 'IF',
    category: 'logical',
    description: 'Returns one value if a condition is true and another value if it\'s false',
    syntax: '=IF(logical_test, value_if_true, value_if_false)',
    example: '=IF(A1>10, "High", "Low")',
    notes: 'Can be nested for multiple conditions.',
  },
  {
    id: 'and',
    name: 'AND',
    category: 'logical',
    description: 'Returns TRUE if all arguments are TRUE',
    syntax: '=AND(logical1, [logical2], ...)',
    example: '=AND(A1>5, B1<10)',
    notes: 'Often used with IF for multiple conditions.',
  },
  {
    id: 'or',
    name: 'OR',
    category: 'logical',
    description: 'Returns TRUE if any argument is TRUE',
    syntax: '=OR(logical1, [logical2], ...)',
    example: '=OR(A1>100, B1>100)',
    notes: 'Returns FALSE only if all arguments are FALSE.',
  },
  {
    id: 'not',
    name: 'NOT',
    category: 'logical',
    description: 'Reverses the logic of its argument',
    syntax: '=NOT(logical)',
    example: '=NOT(A1>10)',
    notes: 'Converts TRUE to FALSE and vice versa.',
  },
  {
    id: 'iferror',
    name: 'IFERROR',
    category: 'logical',
    description: 'Returns a value you specify if a formula evaluates to an error; otherwise returns the result',
    syntax: '=IFERROR(value, value_if_error)',
    example: '=IFERROR(A1/B1, "Error")',
    notes: 'Useful for handling division by zero and other errors.',
  },
  {
    id: 'ifs',
    name: 'IFS',
    category: 'logical',
    description: 'Checks multiple conditions and returns a value for the first TRUE condition',
    syntax: '=IFS(logical_test1, value_if_true1, [logical_test2, value_if_true2], ...)',
    example: '=IFS(A1>90, "A", A1>80, "B", A1>70, "C")',
    notes: 'Modern alternative to nested IF statements.',
  },
  {
    id: 'switch',
    name: 'SWITCH',
    category: 'logical',
    description: 'Evaluates an expression against a list of values and returns corresponding result',
    syntax: '=SWITCH(expression, value1, result1, [default_or_value2, result2], ..., [default])',
    example: '=SWITCH(A1, 1, "One", 2, "Two", "Other")',
    notes: 'Cleaner than multiple nested IFs for value matching.',
  },
  {
    id: 'ifna',
    name: 'IFNA',
    category: 'logical',
    description: 'Returns a value you specify if a formula returns #N/A error',
    syntax: '=IFNA(value, value_if_na)',
    example: '=IFNA(VLOOKUP(A1, B:C, 2, FALSE), "Not found")',
    notes: 'Specifically handles #N/A errors from lookup functions.',
  },
  {
    id: 'xor',
    name: 'XOR',
    category: 'logical',
    description: 'Returns TRUE if an odd number of arguments are TRUE',
    syntax: '=XOR(logical1, [logical2], ...)',
    example: '=XOR(TRUE, FALSE, FALSE)',
    notes: 'Returns TRUE. Exclusive OR operation.',
  },
  {
    id: 'true',
    name: 'TRUE',
    category: 'logical',
    description: 'Returns the logical value TRUE',
    syntax: '=TRUE()',
    example: '=TRUE()',
    notes: 'Can also type TRUE directly without function.',
  },
  {
    id: 'false',
    name: 'FALSE',
    category: 'logical',
    description: 'Returns the logical value FALSE',
    syntax: '=FALSE()',
    example: '=FALSE()',
    notes: 'Can also type FALSE directly without function.',
  },

  // Math & Trig
  {
    id: 'sum',
    name: 'SUM',
    category: 'math-trig',
    description: 'Adds all the numbers in a range',
    syntax: '=SUM(number1, [number2], ...)',
    example: '=SUM(A1:A10)',
    notes: 'Ignores text and logical values. One of the most commonly used functions.',
  },
  {
    id: 'sumif',
    name: 'SUMIF',
    category: 'math-trig',
    description: 'Adds the cells that meet a specified criteria',
    syntax: '=SUMIF(range, criteria, [sum_range])',
    example: '=SUMIF(A1:A10, ">5", B1:B10)',
    notes: 'If sum_range is omitted, the range is summed.',
  },
  {
    id: 'sumifs',
    name: 'SUMIFS',
    category: 'math-trig',
    description: 'Adds the cells that meet multiple criteria',
    syntax: '=SUMIFS(sum_range, criteria_range1, criteria1, [criteria_range2, criteria2], ...)',
    example: '=SUMIFS(C1:C10, A1:A10, "Product", B1:B10, ">100")',
    notes: 'Can handle multiple conditions. Sum_range comes first.',
  },
  {
    id: 'round',
    name: 'ROUND',
    category: 'math-trig',
    description: 'Rounds a number to a specified number of digits',
    syntax: '=ROUND(number, num_digits)',
    example: '=ROUND(3.14159, 2)',
    notes: 'Returns 3.14. Use 0 for whole numbers.',
  },
  {
    id: 'abs',
    name: 'ABS',
    category: 'math-trig',
    description: 'Returns the absolute value of a number',
    syntax: '=ABS(number)',
    example: '=ABS(-5)',
    notes: 'Returns 5. Removes the negative sign.',
  },
  {
    id: 'power',
    name: 'POWER',
    category: 'math-trig',
    description: 'Returns the result of a number raised to a power',
    syntax: '=POWER(number, power)',
    example: '=POWER(2, 3)',
    notes: 'Returns 8. Can also use the ^ operator.',
  },
  {
    id: 'product',
    name: 'PRODUCT',
    category: 'math-trig',
    description: 'Multiplies all the numbers given as arguments',
    syntax: '=PRODUCT(number1, [number2], ...)',
    example: '=PRODUCT(2, 3, 4)',
    notes: 'Returns 24.',
  },
  {
    id: 'sqrt',
    name: 'SQRT',
    category: 'math-trig',
    description: 'Returns the square root of a number',
    syntax: '=SQRT(number)',
    example: '=SQRT(16)',
    notes: 'Returns 4.',
  },
  {
    id: 'mod',
    name: 'MOD',
    category: 'math-trig',
    description: 'Returns the remainder after division',
    syntax: '=MOD(number, divisor)',
    example: '=MOD(10, 3)',
    notes: 'Returns 1 (remainder when 10 is divided by 3).',
  },
  {
    id: 'int',
    name: 'INT',
    category: 'math-trig',
    description: 'Rounds a number down to the nearest integer',
    syntax: '=INT(number)',
    example: '=INT(8.9)',
    notes: 'Returns 8. Always rounds down.',
  },
  {
    id: 'rand',
    name: 'RAND',
    category: 'math-trig',
    description: 'Returns a random decimal number between 0 and 1',
    syntax: '=RAND()',
    example: '=RAND()',
    notes: 'Recalculates on each worksheet change.',
  },
  {
    id: 'randbetween',
    name: 'RANDBETWEEN',
    category: 'math-trig',
    description: 'Returns a random integer between specified numbers',
    syntax: '=RANDBETWEEN(bottom, top)',
    example: '=RANDBETWEEN(1, 100)',
    notes: 'Returns a random integer between 1 and 100.',
  },
  {
    id: 'trunc',
    name: 'TRUNC',
    category: 'math-trig',
    description: 'Truncates a number to a specified number of decimals',
    syntax: '=TRUNC(number, [num_digits])',
    example: '=TRUNC(8.9)',
    notes: 'Returns 8. Removes decimal portion without rounding.',
  },
  {
    id: 'floor',
    name: 'FLOOR',
    category: 'math-trig',
    description: 'Rounds a number down to the nearest multiple of significance',
    syntax: '=FLOOR(number, significance)',
    example: '=FLOOR(23, 5)',
    notes: 'Returns 20.',
  },
  {
    id: 'ceiling',
    name: 'CEILING',
    category: 'math-trig',
    description: 'Rounds a number up to the nearest multiple of significance',
    syntax: '=CEILING(number, significance)',
    example: '=CEILING(22, 5)',
    notes: 'Returns 25.',
  },
  {
    id: 'sin',
    name: 'SIN',
    category: 'math-trig',
    description: 'Returns the sine of an angle',
    syntax: '=SIN(number)',
    example: '=SIN(PI()/2)',
    notes: 'Returns 1. Angle must be in radians.',
  },
  {
    id: 'cos',
    name: 'COS',
    category: 'math-trig',
    description: 'Returns the cosine of an angle',
    syntax: '=COS(number)',
    example: '=COS(0)',
    notes: 'Returns 1. Angle must be in radians.',
  },
  {
    id: 'tan',
    name: 'TAN',
    category: 'math-trig',
    description: 'Returns the tangent of an angle',
    syntax: '=TAN(number)',
    example: '=TAN(PI()/4)',
    notes: 'Returns 1. Angle must be in radians.',
  },
  {
    id: 'pi',
    name: 'PI',
    category: 'math-trig',
    description: 'Returns the value of pi',
    syntax: '=PI()',
    example: '=PI()',
    notes: 'Returns 3.14159265358979.',
  },
  {
    id: 'radians',
    name: 'RADIANS',
    category: 'math-trig',
    description: 'Converts degrees to radians',
    syntax: '=RADIANS(angle)',
    example: '=RADIANS(180)',
    notes: 'Returns PI (3.14159...).',
  },
  {
    id: 'degrees',
    name: 'DEGREES',
    category: 'math-trig',
    description: 'Converts radians to degrees',
    syntax: '=DEGREES(angle)',
    example: '=DEGREES(PI())',
    notes: 'Returns 180.',
  },
  {
    id: 'roundup',
    name: 'ROUNDUP',
    category: 'math-trig',
    description: 'Rounds a number up, away from zero',
    syntax: '=ROUNDUP(number, num_digits)',
    example: '=ROUNDUP(3.14, 1)',
    notes: 'Returns 3.2. Always rounds away from zero.',
  },
  {
    id: 'rounddown',
    name: 'ROUNDDOWN',
    category: 'math-trig',
    description: 'Rounds a number down, toward zero',
    syntax: '=ROUNDDOWN(number, num_digits)',
    example: '=ROUNDDOWN(3.99, 1)',
    notes: 'Returns 3.9. Always rounds toward zero.',
  },
  {
    id: 'gcd',
    name: 'GCD',
    category: 'math-trig',
    description: 'Returns the greatest common divisor',
    syntax: '=GCD(number1, [number2], ...)',
    example: '=GCD(24, 36)',
    notes: 'Returns 12.',
  },
  {
    id: 'lcm',
    name: 'LCM',
    category: 'math-trig',
    description: 'Returns the least common multiple',
    syntax: '=LCM(number1, [number2], ...)',
    example: '=LCM(4, 6)',
    notes: 'Returns 12.',
  },

  // Statistical
  {
    id: 'average',
    name: 'AVERAGE',
    category: 'statistical',
    description: 'Returns the average (arithmetic mean) of the arguments',
    syntax: '=AVERAGE(number1, [number2], ...)',
    example: '=AVERAGE(A1:A10)',
    notes: 'Ignores text and logical values.',
  },
  {
    id: 'averageif',
    name: 'AVERAGEIF',
    category: 'statistical',
    description: 'Returns the average of cells that meet a criteria',
    syntax: '=AVERAGEIF(range, criteria, [average_range])',
    example: '=AVERAGEIF(A1:A10, ">5")',
    notes: 'Similar to SUMIF but calculates average.',
  },
  {
    id: 'count',
    name: 'COUNT',
    category: 'statistical',
    description: 'Counts the number of cells that contain numbers',
    syntax: '=COUNT(value1, [value2], ...)',
    example: '=COUNT(A1:A10)',
    notes: 'Only counts numeric values.',
  },
  {
    id: 'counta',
    name: 'COUNTA',
    category: 'statistical',
    description: 'Counts the number of cells that are not empty',
    syntax: '=COUNTA(value1, [value2], ...)',
    example: '=COUNTA(A1:A10)',
    notes: 'Counts all non-empty cells including text.',
  },
  {
    id: 'countif',
    name: 'COUNTIF',
    category: 'statistical',
    description: 'Counts the number of cells that meet a criteria',
    syntax: '=COUNTIF(range, criteria)',
    example: '=COUNTIF(A1:A10, ">5")',
    notes: 'Useful for counting occurrences.',
  },
  {
    id: 'max',
    name: 'MAX',
    category: 'statistical',
    description: 'Returns the largest value in a set of values',
    syntax: '=MAX(number1, [number2], ...)',
    example: '=MAX(A1:A10)',
    notes: 'Ignores text and logical values.',
  },
  {
    id: 'min',
    name: 'MIN',
    category: 'statistical',
    description: 'Returns the smallest value in a set of values',
    syntax: '=MIN(number1, [number2], ...)',
    example: '=MIN(A1:A10)',
    notes: 'Ignores text and logical values.',
  },
  {
    id: 'median',
    name: 'MEDIAN',
    category: 'statistical',
    description: 'Returns the median (middle value) of a set of numbers',
    syntax: '=MEDIAN(number1, [number2], ...)',
    example: '=MEDIAN(A1:A10)',
    notes: 'If even number of values, returns the average of the two middle values.',
  },
  {
    id: 'mode',
    name: 'MODE',
    category: 'statistical',
    description: 'Returns the most frequently occurring value in a dataset',
    syntax: '=MODE(number1, [number2], ...)',
    example: '=MODE(1, 2, 2, 3, 4)',
    notes: 'Returns 2. Use MODE.SNGL in newer Excel versions.',
  },
  {
    id: 'stdev',
    name: 'STDEV',
    category: 'statistical',
    description: 'Estimates standard deviation based on a sample',
    syntax: '=STDEV(number1, [number2], ...)',
    example: '=STDEV(A1:A10)',
    notes: 'Use STDEV.S in newer Excel versions.',
  },
  {
    id: 'var',
    name: 'VAR',
    category: 'statistical',
    description: 'Estimates variance based on a sample',
    syntax: '=VAR(number1, [number2], ...)',
    example: '=VAR(A1:A10)',
    notes: 'Use VAR.S in newer Excel versions.',
  },
  {
    id: 'percentile',
    name: 'PERCENTILE',
    category: 'statistical',
    description: 'Returns the k-th percentile of values',
    syntax: '=PERCENTILE(array, k)',
    example: '=PERCENTILE(A1:A10, 0.75)',
    notes: 'Returns the 75th percentile. Use PERCENTILE.INC in newer versions.',
  },
  {
    id: 'quartile',
    name: 'QUARTILE',
    category: 'statistical',
    description: 'Returns the quartile of a dataset',
    syntax: '=QUARTILE(array, quart)',
    example: '=QUARTILE(A1:A10, 1)',
    notes: 'quart: 0=min, 1=Q1, 2=median, 3=Q3, 4=max.',
  },
  {
    id: 'rank',
    name: 'RANK',
    category: 'statistical',
    description: 'Returns the rank of a number in a list',
    syntax: '=RANK(number, ref, [order])',
    example: '=RANK(A1, A1:A10, 0)',
    notes: 'order: 0=descending, 1=ascending. Use RANK.EQ in newer versions.',
  },
  {
    id: 'large',
    name: 'LARGE',
    category: 'statistical',
    description: 'Returns the k-th largest value',
    syntax: '=LARGE(array, k)',
    example: '=LARGE(A1:A10, 2)',
    notes: 'Returns the 2nd largest value.',
  },
  {
    id: 'small',
    name: 'SMALL',
    category: 'statistical',
    description: 'Returns the k-th smallest value',
    syntax: '=SMALL(array, k)',
    example: '=SMALL(A1:A10, 3)',
    notes: 'Returns the 3rd smallest value.',
  },
  {
    id: 'averageifs',
    name: 'AVERAGEIFS',
    category: 'statistical',
    description: 'Returns the average of cells that meet multiple criteria',
    syntax: '=AVERAGEIFS(average_range, criteria_range1, criteria1, [criteria_range2, criteria2], ...)',
    example: '=AVERAGEIFS(C1:C10, A1:A10, "Product", B1:B10, ">100")',
    notes: 'Similar to SUMIFS but calculates average.',
  },
  {
    id: 'countifs',
    name: 'COUNTIFS',
    category: 'statistical',
    description: 'Counts the number of cells that meet multiple criteria',
    syntax: '=COUNTIFS(criteria_range1, criteria1, [criteria_range2, criteria2], ...)',
    example: '=COUNTIFS(A1:A10, ">5", B1:B10, "<100")',
    notes: 'Can handle multiple conditions.',
  },
  {
    id: 'countblank',
    name: 'COUNTBLANK',
    category: 'statistical',
    description: 'Counts the number of blank cells in a range',
    syntax: '=COUNTBLANK(range)',
    example: '=COUNTBLANK(A1:A10)',
    notes: 'Counts truly empty cells.',
  },

  // Financial Functions
  {
    id: 'pmt',
    name: 'PMT',
    category: 'financial',
    description: 'Calculates the payment for a loan based on constant payments and interest rate',
    syntax: '=PMT(rate, nper, pv, [fv], [type])',
    example: '=PMT(5%/12, 60, 10000)',
    notes: 'Returns monthly payment for a $10,000 loan at 5% annual interest over 5 years.',
  },
  {
    id: 'pv',
    name: 'PV',
    category: 'financial',
    description: 'Returns the present value of an investment',
    syntax: '=PV(rate, nper, pmt, [fv], [type])',
    example: '=PV(8%/12, 12*20, -500)',
    notes: 'Calculates how much a series of future payments is worth now.',
  },
  {
    id: 'fv',
    name: 'FV',
    category: 'financial',
    description: 'Returns the future value of an investment',
    syntax: '=FV(rate, nper, pmt, [pv], [type])',
    example: '=FV(6%/12, 12*10, -200, 0, 0)',
    notes: 'Calculates future value of regular payments.',
  },
  {
    id: 'rate',
    name: 'RATE',
    category: 'financial',
    description: 'Returns the interest rate per period of an annuity',
    syntax: '=RATE(nper, pmt, pv, [fv], [type], [guess])',
    example: '=RATE(60, -200, 10000)',
    notes: 'Calculates interest rate for a loan.',
  },
  {
    id: 'nper',
    name: 'NPER',
    category: 'financial',
    description: 'Returns the number of periods for an investment',
    syntax: '=NPER(rate, pmt, pv, [fv], [type])',
    example: '=NPER(12%/12, -100, 1000)',
    notes: 'Calculates how many periods needed to pay off a loan.',
  },
  {
    id: 'npv',
    name: 'NPV',
    category: 'financial',
    description: 'Returns the net present value of an investment based on discount rate and series of future cash flows',
    syntax: '=NPV(rate, value1, [value2], ...)',
    example: '=NPV(10%, -10000, 3000, 4200, 6800)',
    notes: 'Useful for investment analysis.',
  },
  {
    id: 'irr',
    name: 'IRR',
    category: 'financial',
    description: 'Returns the internal rate of return for a series of cash flows',
    syntax: '=IRR(values, [guess])',
    example: '=IRR(A1:A5)',
    notes: 'Cash flows must include at least one negative and one positive value.',
  },
  {
    id: 'mirr',
    name: 'MIRR',
    category: 'financial',
    description: 'Returns the modified internal rate of return',
    syntax: '=MIRR(values, finance_rate, reinvest_rate)',
    example: '=MIRR(A1:A5, 10%, 12%)',
    notes: 'More realistic than IRR for some scenarios.',
  },
  {
    id: 'sln',
    name: 'SLN',
    category: 'financial',
    description: 'Returns the straight-line depreciation of an asset',
    syntax: '=SLN(cost, salvage, life)',
    example: '=SLN(30000, 7500, 10)',
    notes: 'Calculates depreciation per period.',
  },
  {
    id: 'db',
    name: 'DB',
    category: 'financial',
    description: 'Returns the depreciation using the fixed-declining balance method',
    syntax: '=DB(cost, salvage, life, period, [month])',
    example: '=DB(1000000, 100000, 6, 1)',
    notes: 'Depreciation for the first period.',
  },
  {
    id: 'ddb',
    name: 'DDB',
    category: 'financial',
    description: 'Returns the depreciation using the double-declining balance method',
    syntax: '=DDB(cost, salvage, life, period, [factor])',
    example: '=DDB(1000000, 100000, 10, 1)',
    notes: 'Accelerated depreciation method.',
  },

  // Database Functions
  {
    id: 'dsum',
    name: 'DSUM',
    category: 'database',
    description: 'Sums the values in a field that match specified criteria',
    syntax: '=DSUM(database, field, criteria)',
    example: '=DSUM(A1:E10, "Sales", G1:G2)',
    notes: 'Database function for conditional sums.',
  },
  {
    id: 'dcount',
    name: 'DCOUNT',
    category: 'database',
    description: 'Counts the cells containing numbers in a field that match criteria',
    syntax: '=DCOUNT(database, field, criteria)',
    example: '=DCOUNT(A1:E10, "Age", G1:G2)',
    notes: 'Database function for conditional counting.',
  },
  {
    id: 'dcounta',
    name: 'DCOUNTA',
    category: 'database',
    description: 'Counts non-blank cells in a field that match criteria',
    syntax: '=DCOUNTA(database, field, criteria)',
    example: '=DCOUNTA(A1:E10, "Name", G1:G2)',
    notes: 'Counts all non-empty cells.',
  },
  {
    id: 'daverage',
    name: 'DAVERAGE',
    category: 'database',
    description: 'Averages the values in a field that match criteria',
    syntax: '=DAVERAGE(database, field, criteria)',
    example: '=DAVERAGE(A1:E10, "Sales", G1:G2)',
    notes: 'Database function for conditional averages.',
  },
  {
    id: 'dmax',
    name: 'DMAX',
    category: 'database',
    description: 'Returns the maximum value in a field that matches criteria',
    syntax: '=DMAX(database, field, criteria)',
    example: '=DMAX(A1:E10, "Sales", G1:G2)',
    notes: 'Database function for conditional maximum.',
  },
  {
    id: 'dmin',
    name: 'DMIN',
    category: 'database',
    description: 'Returns the minimum value in a field that matches criteria',
    syntax: '=DMIN(database, field, criteria)',
    example: '=DMIN(A1:E10, "Sales", G1:G2)',
    notes: 'Database function for conditional minimum.',
  },
  {
    id: 'dget',
    name: 'DGET',
    category: 'database',
    description: 'Extracts a single value from a database that matches criteria',
    syntax: '=DGET(database, field, criteria)',
    example: '=DGET(A1:E10, "Email", G1:G2)',
    notes: 'Returns error if more than one record matches.',
  },

  // Information Functions
  {
    id: 'isblank',
    name: 'ISBLANK',
    category: 'information',
    description: 'Returns TRUE if the value is blank',
    syntax: '=ISBLANK(value)',
    example: '=ISBLANK(A1)',
    notes: 'Useful for checking empty cells.',
  },
  {
    id: 'isnumber',
    name: 'ISNUMBER',
    category: 'information',
    description: 'Returns TRUE if the value is a number',
    syntax: '=ISNUMBER(value)',
    example: '=ISNUMBER(A1)',
    notes: 'Useful for data validation.',
  },
  {
    id: 'istext',
    name: 'ISTEXT',
    category: 'information',
    description: 'Returns TRUE if the value is text',
    syntax: '=ISTEXT(value)',
    example: '=ISTEXT(A1)',
    notes: 'Checks if cell contains text.',
  },
  {
    id: 'iserror',
    name: 'ISERROR',
    category: 'information',
    description: 'Returns TRUE if the value is any error value',
    syntax: '=ISERROR(value)',
    example: '=ISERROR(A1/B1)',
    notes: 'Detects all error types.',
  },
  {
    id: 'isna',
    name: 'ISNA',
    category: 'information',
    description: 'Returns TRUE if the value is the #N/A error',
    syntax: '=ISNA(value)',
    example: '=ISNA(VLOOKUP(A1, B:C, 2, FALSE))',
    notes: 'Specifically checks for #N/A errors.',
  },
  {
    id: 'islogical',
    name: 'ISLOGICAL',
    category: 'information',
    description: 'Returns TRUE if the value is a logical value',
    syntax: '=ISLOGICAL(value)',
    example: '=ISLOGICAL(A1)',
    notes: 'Checks for TRUE or FALSE values.',
  },
  {
    id: 'iseven',
    name: 'ISEVEN',
    category: 'information',
    description: 'Returns TRUE if the number is even',
    syntax: '=ISEVEN(number)',
    example: '=ISEVEN(4)',
    notes: 'Returns TRUE.',
  },
  {
    id: 'isodd',
    name: 'ISODD',
    category: 'information',
    description: 'Returns TRUE if the number is odd',
    syntax: '=ISODD(number)',
    example: '=ISODD(5)',
    notes: 'Returns TRUE.',
  },
  {
    id: 'cell',
    name: 'CELL',
    category: 'information',
    description: 'Returns information about the formatting, location, or contents of a cell',
    syntax: '=CELL(info_type, [reference])',
    example: '=CELL("address", A1)',
    notes: 'info_type can be "address", "col", "row", "type", etc.',
  },
  {
    id: 'type',
    name: 'TYPE',
    category: 'information',
    description: 'Returns a number indicating the data type of a value',
    syntax: '=TYPE(value)',
    example: '=TYPE(A1)',
    notes: '1=number, 2=text, 4=logical, 16=error, 64=array.',
  },
  {
    id: 'n',
    name: 'N',
    category: 'information',
    description: 'Converts a value to a number',
    syntax: '=N(value)',
    example: '=N(TRUE)',
    notes: 'Returns 1. Converts TRUE to 1, FALSE to 0, dates to serial numbers.',
  },

  // Engineering Functions
  {
    id: 'convert',
    name: 'CONVERT',
    category: 'engineering',
    description: 'Converts a number from one measurement system to another',
    syntax: '=CONVERT(number, from_unit, to_unit)',
    example: '=CONVERT(100, "ft", "m")',
    notes: 'Converts 100 feet to meters.',
  },
  {
    id: 'bin2dec',
    name: 'BIN2DEC',
    category: 'engineering',
    description: 'Converts a binary number to decimal',
    syntax: '=BIN2DEC(number)',
    example: '=BIN2DEC(1010)',
    notes: 'Returns 10.',
  },
  {
    id: 'dec2bin',
    name: 'DEC2BIN',
    category: 'engineering',
    description: 'Converts a decimal number to binary',
    syntax: '=DEC2BIN(number, [places])',
    example: '=DEC2BIN(10)',
    notes: 'Returns 1010.',
  },
  {
    id: 'hex2dec',
    name: 'HEX2DEC',
    category: 'engineering',
    description: 'Converts a hexadecimal number to decimal',
    syntax: '=HEX2DEC(number)',
    example: '=HEX2DEC("FF")',
    notes: 'Returns 255.',
  },
  {
    id: 'dec2hex',
    name: 'DEC2HEX',
    category: 'engineering',
    description: 'Converts a decimal number to hexadecimal',
    syntax: '=DEC2HEX(number, [places])',
    example: '=DEC2HEX(255)',
    notes: 'Returns FF.',
  },
  {
    id: 'oct2dec',
    name: 'OCT2DEC',
    category: 'engineering',
    description: 'Converts an octal number to decimal',
    syntax: '=OCT2DEC(number)',
    example: '=OCT2DEC(77)',
    notes: 'Returns 63.',
  },
  {
    id: 'dec2oct',
    name: 'DEC2OCT',
    category: 'engineering',
    description: 'Converts a decimal number to octal',
    syntax: '=DEC2OCT(number, [places])',
    example: '=DEC2OCT(63)',
    notes: 'Returns 77.',
  },
  {
    id: 'delta',
    name: 'DELTA',
    category: 'engineering',
    description: 'Tests whether two values are equal',
    syntax: '=DELTA(number1, [number2])',
    example: '=DELTA(5, 5)',
    notes: 'Returns 1 if equal, 0 if not.',
  },
];
