export interface Formula {
  id: string;
  name: string;
  category: string;
  description: string;
  syntax: string;
  example: string;
  notes?: string;
}

export interface Category {
  id: string;
  name: string;
  description: string;
  icon: string;
}

export const categories: Category[] = [
  {
    id: 'lookup-reference',
    name: 'Lookup & Reference',
    description: 'Find and retrieve data from ranges and tables',
    icon: '🔍',
  },
  {
    id: 'text',
    name: 'Text Functions',
    description: 'Manipulate and format text strings',
    icon: '📝',
  },
  {
    id: 'date-time',
    name: 'Date & Time',
    description: 'Work with dates, times, and periods',
    icon: '📅',
  },
  {
    id: 'logical',
    name: 'Logical Functions',
    description: 'Perform conditional operations and tests',
    icon: '💡',
  },
  {
    id: 'math-trig',
    name: 'Math & Trig',
    description: 'Mathematical and trigonometric calculations',
    icon: '🔢',
  },
  {
    id: 'statistical',
    name: 'Statistical',
    description: 'Analyze and summarize data sets',
    icon: '📊',
  },
];

export const formulas: Formula[] = [
  // Lookup & Reference
  {
    id: 'vlookup',
    name: 'VLOOKUP',
    category: 'lookup-reference',
    description: 'Searches for a value in the first column of a range and returns a value in the same row from another column',
    syntax: '=VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])',
    example: '=VLOOKUP("Apple", A2:C10, 3, FALSE)',
    notes: 'Use FALSE for exact match, TRUE for approximate match. The lookup column must be the leftmost column.',
  },
  {
    id: 'hlookup',
    name: 'HLOOKUP',
    category: 'lookup-reference',
    description: 'Searches for a value in the top row of a range and returns a value in the same column from another row',
    syntax: '=HLOOKUP(lookup_value, table_array, row_index_num, [range_lookup])',
    example: '=HLOOKUP("Product", A1:E5, 3, FALSE)',
    notes: 'Horizontal version of VLOOKUP. Useful when data is organized in rows rather than columns.',
  },
  {
    id: 'index',
    name: 'INDEX',
    category: 'lookup-reference',
    description: 'Returns a value from a table based on the row and column numbers you specify',
    syntax: '=INDEX(array, row_num, [column_num])',
    example: '=INDEX(A1:C10, 5, 2)',
    notes: 'Often combined with MATCH for flexible lookups.',
  },
  {
    id: 'match',
    name: 'MATCH',
    category: 'lookup-reference',
    description: 'Returns the relative position of an item in a range that matches a specified value',
    syntax: '=MATCH(lookup_value, lookup_array, [match_type])',
    example: '=MATCH("Apple", A1:A10, 0)',
    notes: 'Use 0 for exact match, 1 for less than, -1 for greater than.',
  },
  {
    id: 'xlookup',
    name: 'XLOOKUP',
    category: 'lookup-reference',
    description: 'Modern replacement for VLOOKUP that searches a range or array and returns the corresponding item',
    syntax: '=XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])',
    example: '=XLOOKUP("Apple", A2:A10, C2:C10)',
    notes: 'More flexible than VLOOKUP, can search in any direction and supports advanced features.',
  },

  // Text Functions
  {
    id: 'concatenate',
    name: 'CONCATENATE',
    category: 'text',
    description: 'Joins several text strings into one text string',
    syntax: '=CONCATENATE(text1, [text2], ...)',
    example: '=CONCATENATE("Hello", " ", "World")',
    notes: 'Can also use the & operator. CONCAT and TEXTJOIN are modern alternatives.',
  },
  {
    id: 'left',
    name: 'LEFT',
    category: 'text',
    description: 'Returns the leftmost characters from a text string',
    syntax: '=LEFT(text, [num_chars])',
    example: '=LEFT("Excel Formula", 5)',
    notes: 'Returns "Excel". Default num_chars is 1.',
  },
  {
    id: 'right',
    name: 'RIGHT',
    category: 'text',
    description: 'Returns the rightmost characters from a text string',
    syntax: '=RIGHT(text, [num_chars])',
    example: '=RIGHT("Excel Formula", 7)',
    notes: 'Returns "Formula". Default num_chars is 1.',
  },
  {
    id: 'mid',
    name: 'MID',
    category: 'text',
    description: 'Returns a specific number of characters from a text string, starting at the position you specify',
    syntax: '=MID(text, start_num, num_chars)',
    example: '=MID("Excel Formula", 7, 7)',
    notes: 'Returns "Formula". Position counting starts at 1.',
  },
  {
    id: 'len',
    name: 'LEN',
    category: 'text',
    description: 'Returns the number of characters in a text string',
    syntax: '=LEN(text)',
    example: '=LEN("Hello")',
    notes: 'Returns 5. Counts all characters including spaces.',
  },
  {
    id: 'upper',
    name: 'UPPER',
    category: 'text',
    description: 'Converts text to uppercase',
    syntax: '=UPPER(text)',
    example: '=UPPER("excel")',
    notes: 'Returns "EXCEL".',
  },
  {
    id: 'lower',
    name: 'LOWER',
    category: 'text',
    description: 'Converts text to lowercase',
    syntax: '=LOWER(text)',
    example: '=LOWER("EXCEL")',
    notes: 'Returns "excel".',
  },
  {
    id: 'trim',
    name: 'TRIM',
    category: 'text',
    description: 'Removes extra spaces from text',
    syntax: '=TRIM(text)',
    example: '=TRIM("  Excel  Formula  ")',
    notes: 'Removes leading, trailing, and extra spaces between words.',
  },

  // Date & Time
  {
    id: 'today',
    name: 'TODAY',
    category: 'date-time',
    description: 'Returns the current date',
    syntax: '=TODAY()',
    example: '=TODAY()',
    notes: 'Updates automatically when the worksheet is recalculated. Does not include time.',
  },
  {
    id: 'now',
    name: 'NOW',
    category: 'date-time',
    description: 'Returns the current date and time',
    syntax: '=NOW()',
    example: '=NOW()',
    notes: 'Updates automatically. Includes both date and time.',
  },
  {
    id: 'date',
    name: 'DATE',
    category: 'date-time',
    description: 'Returns a date value from year, month, and day',
    syntax: '=DATE(year, month, day)',
    example: '=DATE(2024, 12, 25)',
    notes: 'Useful for creating dates from separate values.',
  },
  {
    id: 'year',
    name: 'YEAR',
    category: 'date-time',
    description: 'Returns the year from a date value',
    syntax: '=YEAR(serial_number)',
    example: '=YEAR(TODAY())',
    notes: 'Returns a 4-digit year (e.g., 2024).',
  },
  {
    id: 'month',
    name: 'MONTH',
    category: 'date-time',
    description: 'Returns the month from a date value',
    syntax: '=MONTH(serial_number)',
    example: '=MONTH(TODAY())',
    notes: 'Returns a number from 1 (January) to 12 (December).',
  },
  {
    id: 'day',
    name: 'DAY',
    category: 'date-time',
    description: 'Returns the day of the month from a date value',
    syntax: '=DAY(serial_number)',
    example: '=DAY(TODAY())',
    notes: 'Returns a number from 1 to 31.',
  },
  {
    id: 'datedif',
    name: 'DATEDIF',
    category: 'date-time',
    description: 'Calculates the difference between two dates',
    syntax: '=DATEDIF(start_date, end_date, unit)',
    example: '=DATEDIF("1/1/2020", "1/1/2024", "Y")',
    notes: 'Units: "Y" (years), "M" (months), "D" (days), "MD" (days ignoring months), etc.',
  },

  // Logical Functions
  {
    id: 'if',
    name: 'IF',
    category: 'logical',
    description: 'Returns one value if a condition is true and another value if it\'s false',
    syntax: '=IF(logical_test, value_if_true, value_if_false)',
    example: '=IF(A1>10, "High", "Low")',
    notes: 'Can be nested for multiple conditions.',
  },
  {
    id: 'and',
    name: 'AND',
    category: 'logical',
    description: 'Returns TRUE if all arguments are TRUE',
    syntax: '=AND(logical1, [logical2], ...)',
    example: '=AND(A1>5, B1<10)',
    notes: 'Often used with IF for multiple conditions.',
  },
  {
    id: 'or',
    name: 'OR',
    category: 'logical',
    description: 'Returns TRUE if any argument is TRUE',
    syntax: '=OR(logical1, [logical2], ...)',
    example: '=OR(A1>100, B1>100)',
    notes: 'Returns FALSE only if all arguments are FALSE.',
  },
  {
    id: 'not',
    name: 'NOT',
    category: 'logical',
    description: 'Reverses the logic of its argument',
    syntax: '=NOT(logical)',
    example: '=NOT(A1>10)',
    notes: 'Converts TRUE to FALSE and vice versa.',
  },
  {
    id: 'iferror',
    name: 'IFERROR',
    category: 'logical',
    description: 'Returns a value you specify if a formula evaluates to an error; otherwise returns the result',
    syntax: '=IFERROR(value, value_if_error)',
    example: '=IFERROR(A1/B1, "Error")',
    notes: 'Useful for handling division by zero and other errors.',
  },

  // Math & Trig
  {
    id: 'sum',
    name: 'SUM',
    category: 'math-trig',
    description: 'Adds all the numbers in a range',
    syntax: '=SUM(number1, [number2], ...)',
    example: '=SUM(A1:A10)',
    notes: 'Ignores text and logical values. One of the most commonly used functions.',
  },
  {
    id: 'sumif',
    name: 'SUMIF',
    category: 'math-trig',
    description: 'Adds the cells that meet a specified criteria',
    syntax: '=SUMIF(range, criteria, [sum_range])',
    example: '=SUMIF(A1:A10, ">5", B1:B10)',
    notes: 'If sum_range is omitted, the range is summed.',
  },
  {
    id: 'sumifs',
    name: 'SUMIFS',
    category: 'math-trig',
    description: 'Adds the cells that meet multiple criteria',
    syntax: '=SUMIFS(sum_range, criteria_range1, criteria1, [criteria_range2, criteria2], ...)',
    example: '=SUMIFS(C1:C10, A1:A10, "Product", B1:B10, ">100")',
    notes: 'Can handle multiple conditions. Sum_range comes first.',
  },
  {
    id: 'round',
    name: 'ROUND',
    category: 'math-trig',
    description: 'Rounds a number to a specified number of digits',
    syntax: '=ROUND(number, num_digits)',
    example: '=ROUND(3.14159, 2)',
    notes: 'Returns 3.14. Use 0 for whole numbers.',
  },
  {
    id: 'abs',
    name: 'ABS',
    category: 'math-trig',
    description: 'Returns the absolute value of a number',
    syntax: '=ABS(number)',
    example: '=ABS(-5)',
    notes: 'Returns 5. Removes the negative sign.',
  },
  {
    id: 'power',
    name: 'POWER',
    category: 'math-trig',
    description: 'Returns the result of a number raised to a power',
    syntax: '=POWER(number, power)',
    example: '=POWER(2, 3)',
    notes: 'Returns 8. Can also use the ^ operator.',
  },

  // Statistical
  {
    id: 'average',
    name: 'AVERAGE',
    category: 'statistical',
    description: 'Returns the average (arithmetic mean) of the arguments',
    syntax: '=AVERAGE(number1, [number2], ...)',
    example: '=AVERAGE(A1:A10)',
    notes: 'Ignores text and logical values.',
  },
  {
    id: 'averageif',
    name: 'AVERAGEIF',
    category: 'statistical',
    description: 'Returns the average of cells that meet a criteria',
    syntax: '=AVERAGEIF(range, criteria, [average_range])',
    example: '=AVERAGEIF(A1:A10, ">5")',
    notes: 'Similar to SUMIF but calculates average.',
  },
  {
    id: 'count',
    name: 'COUNT',
    category: 'statistical',
    description: 'Counts the number of cells that contain numbers',
    syntax: '=COUNT(value1, [value2], ...)',
    example: '=COUNT(A1:A10)',
    notes: 'Only counts numeric values.',
  },
  {
    id: 'counta',
    name: 'COUNTA',
    category: 'statistical',
    description: 'Counts the number of cells that are not empty',
    syntax: '=COUNTA(value1, [value2], ...)',
    example: '=COUNTA(A1:A10)',
    notes: 'Counts all non-empty cells including text.',
  },
  {
    id: 'countif',
    name: 'COUNTIF',
    category: 'statistical',
    description: 'Counts the number of cells that meet a criteria',
    syntax: '=COUNTIF(range, criteria)',
    example: '=COUNTIF(A1:A10, ">5")',
    notes: 'Useful for counting occurrences.',
  },
  {
    id: 'max',
    name: 'MAX',
    category: 'statistical',
    description: 'Returns the largest value in a set of values',
    syntax: '=MAX(number1, [number2], ...)',
    example: '=MAX(A1:A10)',
    notes: 'Ignores text and logical values.',
  },
  {
    id: 'min',
    name: 'MIN',
    category: 'statistical',
    description: 'Returns the smallest value in a set of values',
    syntax: '=MIN(number1, [number2], ...)',
    example: '=MIN(A1:A10)',
    notes: 'Ignores text and logical values.',
  },
  {
    id: 'median',
    name: 'MEDIAN',
    category: 'statistical',
    description: 'Returns the median (middle value) of a set of numbers',
    syntax: '=MEDIAN(number1, [number2], ...)',
    example: '=MEDIAN(A1:A10)',
    notes: 'If even number of values, returns the average of the two middle values.',
  },
];
